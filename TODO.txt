-- eventually encapsulate compontents in Tile (TileStack), Entity, Projectile so they are not visible from outside

- Clear world generation code //little priority since it is waiting for libs still

- Make camera like the one in Carcassone. Move there everything involving camera (for example conversion between coordinates)

- remove out of bounds tile from tile column?

- currently a lot of code from World, Inventory is duplicated in TileTransferMediator, think of a way to simplify it (TileTransferMediator has to call more event that World, Invntory so it is problematic)

- WorldView? currently World is also a WindowContent, which should be decoupled (like inventory is)

- make outer border caching tiled if the map size grows too much (doing whole map at once may be slow)

CONSIDER:
hook up StaticEmbeddedHomogenousMemoryPool for components, tiles, entities, projectiles, see how it behaves

- change controls
-- LMB attack
-- RMB use
-- CTRL + LMB move all
-- SHIFT + LMB move half
-- ALT + LMB move amount chosen in window
--- trying to put item displays a window
---- position near the mouse, has slider and reacts to arrow keys and numeric keys
--- cancel = cancel
--- ok = move max(stack size, specified amount)
---- normally no way to select more than stack size, but a safety measure i needed
--- don't interrupt if the item being moved changed
-- MMB look

- instead of separate drawing of normal and meta sprites maybe gather both at once and then render. Many things just differ in texture offset so it would minimize unnecessary recomputation for meta sprites.
-- SpriteBatch::SpriteGeometry class that holds std::array with 6 sf::Vertex objects. drawing then goes 1. calculate sprite geometry; 2. append to main sprite batch; 3. opt. change uv mapping; 4. opt. append to meta sprite batch.
-- keep old way too
--- that way objects dont have to recalculate things for both normal and meta sprites.

- maybe update all equiped tiles to allow for timed equipment?

- add support for temporary effects (not coming from equiped items)
-- potions?
--- health/mana addition specified separately and also get applied through separate functions in player

- fix magic wall sprites alpha channel

THIS:
- prefabs should first be loaded (names, components), then actually initialized
-- this is to allow for example tile to refer to each others' prefabs (any way is undefined now, because loading order is undefined)

- consider checking for light occluders/colliders/maybe more; top to bottom (now is bottom to top), and specify a max depth of search

- think of a way to minimize code duplication in tile models (simple inheritance won't work because all models hold pointer to common data)

- make mapgenerator update all tiles once (currenly it does up to 9 updates on one tile)

- group tile (and entity, and projectile) flags in one place (struct with bitfields or something)
-- somehow merge 2 sets of flags (one from model, one from renderer)
-- or make them separate (probably better)

- consider using ls::Vec2I/ls::Vec3I to pass tile coordinates

- consider replacing current item randomization distribution with something along havinf PDF of 1/e^(nx)
-- or (1-x)^n   ((1-x)^n*(n+1))
--- or leave as it is now

- window resizing (should be done fully by the window being resized. Relying only on min,max size parameters)

TODO:
- pillar tile

- try dim light depending on height from the ground
- player's line of sight using raycasting

- '%' sign missing in tibia font

- currently outer borders may be rendered wrong if they are in different textures, because they can't be sorted by texture. Probably no good solution, so will have to make sure no two outer borders from 2 textures are one to each other.

- many places that currently use std::lower_bound, std::upper_bound could probably have better performance with linear serach because the arrays are small