-- eventually encapsulate compontents in Tile (TileStack), Entity, Projectile so they are not visible from outside

- Clear world generation code //little priority since it is waiting for libs still

- Make camera like the one in Carcassone. Move there everything involving camera (for example conversion between coordinates)

- remove out of bounds tile from tile column?

- currently a lot of code from World, Inventory is duplicated in TileTransferMediator, think of a way to simplify it (TileTransferMediator has to call more event that World, Invntory so it is problematic)

- WorldView? currently World is also a WindowContent, which should be decoupled (like inventory is)

- make outer border caching tiled if the map size grows too much (doing whole map at once may be slow)

CONSIDER:
hook up StaticEmbeddedHomogenousMemoryPool for components, tiles, entities, projectiles, see how it behaves

- tile transfer mediator does not handle toMove = 0 properly, because it does not exit early

- global Input class for input aside sfml events

- change controls
-- ALT + LMB move amount chosen in window
--- trying to put item displays a window
---- position near the mouse, has slider and reacts to arrow keys and numeric keys
--- cancel = cancel
--- ok = move max(stack size, specified amount)
---- normally no way to select more than stack size, but a safety measure i needed
--- don't interrupt if the item being moved changed

- potions for testing temporary attributes

- consider checking for light occluders/colliders/maybe more; top to bottom (now is bottom to top), and specify a max depth of search

- think of a way to minimize code duplication in tile models (simple inheritance won't work because all models hold pointer to common data)

- consider using ls::Vec2I/ls::Vec3I to pass tile coordinates

- consider replacing current item randomization distribution with something along havinf PDF of 1/e^(nx)
-- or (1-x)^n   ((1-x)^n*(n+1))
--- or leave as it is now

- window resizing (should be done fully by the window being resized. Relying only on min,max size parameters)

- many places that currently use std::lower_bound, std::upper_bound could probably have better performance with linear serach because the arrays are small

- pillar tile

- '%' sign missing in tibia font
-- probably get a different font

BIG (possibly breaking) CHANGES TO CONSIDER
- try dim light depending on height from the ground
- player's line of sight using raycasting

- currently outer borders may be rendered wrong if they are in different textures, because they can't be sorted by texture. Probably no good solution, so will have to make sure no two outer borders from 2 textures are one to each other.
-- maybe disable depth test for layer 0?



DO LATER IF NOTHING POPS UP IN THE WAY
- consider using alpha channel for both normal sprites and meta sprites as 'z' coordinate (initial height of the object. would be added to frag depth). Render tiles respecting height (simple offset).
-- would enable stacking non-flat things in the world. Currently every non-flat thing has to set allowsTilesAbove to false to prevent tile from below from rendering through it.
--- disallow stacking more items if max height would be surpassed
-- projectiles could use that for dropoff after reaching certain velocity or time threshold

- change depth range to [0.0, 2.0] and adjust it so 1.0 is one tile size